component:
  name: lambda
  mapping:
    - .
  # dependsOn:
  #   - ../iam_role
  #   - ../security_group
  #   - ../subnet_private
  template:
    resource:
      aws_lambda_function:
        lambda:
          function_name: DemoAWSLambda7356626c
          handler: demo.handler
          runtime: nodejs8.10
          role: '${data.terraform_remote_state.iam.arn}'
          s3_bucket: data-lake-terrahub-us-east-1
          s3_key: deploy/mitocgroup/demo-terraform-automation-aws/lambda/demo.zip
          description: Managed by TerraHub
          memory_size: 512
          publish: false
          source_code_hash: '${base64sha256("${local.component["name"]}")}'
          timeout: 300
          vpc_config:
            security_group_ids:
              - '${data.terraform_remote_state.sg.thub_id}'
            subnet_ids:
              - '${data.terraform_remote_state.subnet.thub_id}'
          tags: >-
            ${map("Description","Managed by TerraHub",
            "Name","demo-terraform-automation-aws", "ThubCode","7356626c",
            "ThubEnv","default")}
    output:
      id:
        value: '${aws_lambda_function.lambda.id}'
      thub_id:
        value: '${aws_lambda_function.lambda.id}'
      qualified_arn:
        value: '${aws_lambda_function.lambda.qualified_arn}'
      invoke_arn:
        value: '${aws_lambda_function.lambda.invoke_arn}'
      source_code_hash:
        value: '${aws_lambda_function.lambda.source_code_hash}'
      tracing_config:
        value: '${aws_lambda_function.lambda.tracing_config}'
      source_code_size:
        value: '${aws_lambda_function.lambda.source_code_size}'
      version:
        value: '${aws_lambda_function.lambda.version}'
      last_modified:
        value: '${aws_lambda_function.lambda.last_modified}'
      arn:
        value: '${aws_lambda_function.lambda.arn}'
    terraform:
      backend:
        s3:
          bucket: data-lake-terrahub-us-east-1
          key: terraform/mitocgroup/demo-terraform-automation-aws/lambda/terraform.tfstate
          region: us-east-1
          workspace_key_prefix: terraform_workspaces
    data:
      terraform_remote_state:
        iam:
          backend: s3
          config:
          - bucket: data-lake-terrahub-us-east-1
            key: terraform/mitocgroup/demo-terraform-automation-aws/iam_role/terraform.tfstate
            region: us-east-1
        subnet:
          backend: s3
          config:
          - bucket: data-lake-terrahub-us-east-1
            key: terraform/mitocgroup/demo-terraform-automation-aws/subnet_private/terraform.tfstate
            region: us-east-1
        sg:
          backend: s3
          config:
          - bucket: data-lake-terrahub-us-east-1
            key: terraform/mitocgroup/demo-terraform-automation-aws/security_group/terraform.tfstate
            region: us-east-1
build:
  env:
    variables:
      THUB_ENV: dev
      THUB_LAMBDA_ZIP: demo.zip
      THUB_BUILD_PATH: ..
      THUB_S3_PATH: "s3://data-lake-terrahub-us-east-1/deploy/mitocgroup/demo-terraform-automation-aws/lambda"
      THUB_BUILD_OK: true
  phases:
    post_build:
      commands:
        - 'echo "BUILD: Running post_build step"'
        - ./scripts/zip.sh $THUB_LAMBDA_ZIP $THUB_BUILD_PATH/demo.js
        - ./scripts/upload.sh $THUB_LAMBDA_ZIP $THUB_S3_PATH/$THUB_LAMBDA_ZIP
      finally:
        - 'echo "BUILD: post_build step successful"'
